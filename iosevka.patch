diff --git a/packages/font-glyphs/src/auto-build/transformed.ptl b/packages/font-glyphs/src/auto-build/transformed.ptl
index 39e7da7..8c62ab1 100644
--- a/packages/font-glyphs/src/auto-build/transformed.ptl
+++ b/packages/font-glyphs/src/auto-build/transformed.ptl
@@ -443,6 +443,12 @@ glyph-block Autobuild-Transformed : begin
 			list 0x1E069 'cyrl/dze'
 			list 0x1E06A 'cyrl/dzhe'
 
+		# Numeric literal base ligation
+		createSubscripts 'numericbase' null : list
+			list null 'b'
+			list null 'o'
+			list null 'x'
+
 		createSubscripts 'denominator' DenominatorForm : list
 			list null 'zero.onum'
 			list null 'one.onum'
@@ -731,6 +737,15 @@ glyph-block Autobuild-Transformed-Texture : begin
 		# link-relations relSets
 
 	define ranges : list
+		# Adds more of ascii, allowing letters to expand into space and punctation
+		list 0x20 0x21
+		list 0x27 0x29
+		list 0x2C 0x2C
+		list 0x2E 0x2E
+		list 0x2E 0x2E
+		list 0x5B 0x5D
+		list 0x60 0x60
+		list 0x6B 0x6D
 		list 0x41 0x5A
 		list 0x61 0x7A
 		list 0xC0 0xFF
@@ -747,8 +762,9 @@ glyph-block Autobuild-Transformed-Texture : begin
 				if source : results.push { null source }
 		return results
 
-	define EXTENSION :  1 / 12
-	define SHRINK    : -1 / 12
+	# More dramatic effect to texture extension and shrink
+	define EXTENSION :  5 / 32
+	define SHRINK    : -5 / 32
 	createTextureDerivatives Texture.ExtL  EXTENSION 0         [jobs 0xF000]
 	createTextureDerivatives Texture.ExtR  0         EXTENSION [jobs 0xF100]
 	createTextureDerivatives Texture.ExtLR EXTENSION EXTENSION [jobs 0xF200]
diff --git a/packages/font-glyphs/src/letter/latin/upper-a.ptl b/packages/font-glyphs/src/letter/latin/upper-a.ptl
index 50a29c9..aafb3eb 100644
--- a/packages/font-glyphs/src/letter/latin/upper-a.ptl
+++ b/packages/font-glyphs/src/letter/latin/upper-a.ptl
@@ -28,7 +28,8 @@ glyph-block Letter-Latin-Upper-A : begin
 	glyph-block-export ABarPosition
 	define [ABarPosition slabKind top] : begin
 		local fBaseSlabs : maskBits slabKind : bitOr SLAB-LEFT SLAB-RIGHT
-		return : mix [if fBaseSlabs Stroke 0] top (XH / 2 / CAP)
+		# Lower the ABar by a stroke width
+		return : [mix [if fBaseSlabs Stroke 0] top (XH / 2 / CAP)] - Stroke
 
 	glyph-block-export AConfig
 	define AConfig : SuffixCfg.weave
diff --git a/packages/font-glyphs/src/meta/aesthetics.ptl b/packages/font-glyphs/src/meta/aesthetics.ptl
index b546cf3..856a4a9 100644
--- a/packages/font-glyphs/src/meta/aesthetics.ptl
+++ b/packages/font-glyphs/src/meta/aesthetics.ptl
@@ -383,7 +383,8 @@ export : define DesignParameters : object
 	geometric_small_x          (4    / 7)
 	geometric_medium_small_x   (4.75 / 7)
 	geometric_medium_x         (5.5  / 7)
-	arrow_size                 0.45
+	# TODO: can remove this if its no longer used
+	arrow_size                 0.585
 	# ()
 	parenOutside               0.2
 	parenOutsideSwAdj          0.2
diff --git a/packages/font-glyphs/src/symbol/arrow.ptl b/packages/font-glyphs/src/symbol/arrow.ptl
index 557cd7c..ca7c9c6 100644
--- a/packages/font-glyphs/src/symbol/arrow.ptl
+++ b/packages/font-glyphs/src/symbol/arrow.ptl
@@ -8,18 +8,23 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 	glyph-block-import CommonShapes
 	glyph-block-import Common-Derivatives
 	glyph-block-import Symbol-Geometric-Shared : UnicodeWeightGrade
+	glyph-block-import Symbol-Math-Relation-Common : EqualHalfSpace # EqualHoleWidth <- should use this for double lines
 
-	define arrowHeight : para.arrowHeight * (Width - SB / 2) * [Math.pow (MosaicWidth / MosaicUnitWidth) (1 / 3)]
-	define arrowWidth  : Math.min (MosaicWidth - SB / 2) arrowHeight
-	define arrowTop : [mix OperBot OperTop (1 / 2)] + arrowHeight / 2
-	define arrowBot : [mix OperBot OperTop (1 / 2)] - arrowHeight / 2
+	# Arrow width as the width of two operators
+	define arrowWidth : MosaicWidth - SB * 4
+	define arrowHeight : Width * 2 - SB * 4
+
+	# Arrow vertically baseline aligned
+	define arrowTop  arrowHeight
+	define arrowBot  0
 	define arrowMidX : MosaicWidth / 2
 	define arrowSB : (MosaicWidth - arrowWidth) / 2
 	define arrowRSB : MosaicWidth - arrowSB
 	define o : O * 2
 
-	define arrowHeadSize : (Width - SB) * DesignParameters.arrow_size * [Math.pow (arrowWidth / Width) 0.5] - [AdviceStroke 5] / 4
 	define arrowSw       OperatorStroke
+	# Arrow head relative to symbol midline and baseline
+	define arrowHeadSize : (SymbolMid - arrowSw * 0.5 * Math.SQRT1_2) * [Math.pow (MosaicWidth / 2 / Width) 0.5]
 	define halfArrowSw : arrowSw / 2
 	define bendArrowHeadSize : mix arrowSw arrowHeadSize 0.75
 	define fine : AdviceStroke 3.5
@@ -30,13 +35,26 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 	define kLongArrowSB : [DivFrame MosaicWidthScalar 4].leftSB / [DivFrame MosaicWidthScalar 2].leftSB
 
 	# Diagonal arrow params
-	define diagPropX : 1 / [Math.pow 2 (1 / 4)]
-	define diagPropY : 1 / [Math.pow 2 (1 / 4)]
+	define diagPropX : 1 / [Math.pow 2 (2 / 5)]
+	define diagPropY : 1 / [Math.pow 2 (2 / 5)]
 	define arrowDiagRSB : mix arrowMidX arrowRSB diagPropX
 	define arrowDiagSB  : mix arrowMidX arrowSB  diagPropX
 	define arrowDiagBot : mix arrowMidX arrowBot diagPropY
 	define arrowDiagTop : mix arrowMidX arrowTop diagPropY
 
+	# Double arrow params
+	define arrowDoubleHeight : arrowHeight * 1.25
+	define arrowDoubleWidth : Math.min (MosaicWidth - SB) arrowDoubleHeight
+	define arrowDoubleTop : [mix OperBot OperTop (1 / 2)] + arrowDoubleHeight / 2
+	define arrowDoubleBot : [mix OperBot OperTop (1 / 2)] - arrowDoubleHeight / 2
+	define arrowDoubleMidX : MosaicWidth / 2
+	define arrowDoubleSB : (MosaicWidth - arrowDoubleWidth) / 2
+	define arrowDoubleRSB : MosaicWidth - arrowDoubleSB
+	define arrowDoubleDiagRSB : mix arrowMidX arrowDoubleRSB diagPropX
+	define arrowDoubleDiagSB  : mix arrowMidX arrowDoubleSB  diagPropX
+	define arrowDoubleDiagBot : mix arrowMidX arrowDoubleBot diagPropY
+	define arrowDoubleDiagTop : mix arrowMidX arrowDoubleTop diagPropY
+
 	define [ArrowBar x1 y1 x2 y2 halfSw w _offset] : begin
 		return : PointingTo x1 y1 x2 y2 : lambda [mag] : begin
 			local p : (mag - [fallback _offset : o + halfSw * [fallback w 1.1]]) / mag
@@ -90,23 +108,32 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 				flat (mag - [Math.abs s] / 2) 0 [widths.center (halfSw * 2)]
 				curl [mix mag 0 p] 0
 
-	define [ArrowHead x1 y1 x2 y2 _size] : union
-		LHSHalfArrowHead x1 y1 x2 y2 0 _size
-		RHSHalfArrowHead x1 y1 x2 y2 0 _size
+	# Squared arrow head
+	define [ArrowHead x1 y1 x2 y2 _size] : begin
+		local size : fallback _size arrowHeadSize
+		return : union
+			new-glyph : PointingTo x1 y1 x2 y2 : lambda [mag] : dispiro
+				widths.lhs arrowSw
+				flat (o) 0
+				curl (o + size) (-size)
+			new-glyph : PointingTo x1 y1 x2 y2 : lambda [mag] : dispiro
+				widths.rhs arrowSw
+				flat (o) 0
+				curl (o + size) size
 
 	define [LHSHalfArrowHead x1 y1 x2 y2 width _size] : begin
 		local size : fallback _size arrowHeadSize
 		return : new-glyph : PointingTo x1 y1 x2 y2 : lambda [mag] : dispiro
-			widths.lhs fine
+			widths.lhs arrowSw
 			flat (o) (width / 2) [heading Downward]
-			curl (o + size) (-size) [widths.lhs terminal]
+			curl (o + size) (-size)
 
 	define [RHSHalfArrowHead x1 y1 x2 y2 width _size] : begin
 		local size : fallback _size arrowHeadSize
 		return : new-glyph : PointingTo x1 y1 x2 y2 : lambda [mag] : dispiro
-			widths.rhs fine
+			widths.rhs arrowSw
 			flat (o) (-width / 2) [heading Upward]
-			curl (o + size) size [widths.rhs terminal]
+			curl (o + size) size
 
 	define [SsArrowHead x1 y1 x2 y2 _size] : union
 		LHSHalfSsArrowHead x1 y1 x2 y2 0 _size
@@ -731,7 +758,8 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 		DoubleArrow2 [HalfArrowShape LHSHalfArrowHead] [HalfArrowShape RHSHalfArrowHead] [MangleName 'arrowUpHLDownHR']    [MangleUnicode 0x2951] arrowMidX arrowTop arrowMidX arrowBot
 
 
-	define waveArrowAmplitude : (Width - SB) * DesignParameters.arrow_size * (0.7 + 0.4 * MosaicWidthScalar)
+    # Match wave ligations
+	define waveArrowAmplitude : (EqualHalfSpace + OperatorStroke) / 0.6 # (Width - SB) * DesignParameters.arrow_size * (0.7 + 0.4 * MosaicWidthScalar)
 	do "Wave arrows"
 		glyph-block-import Shared-Symbol-Shapes : CreateWaveShape
 		define WaveSw : AdviceStroke (5.5 - MosaicWidthScalar)
@@ -1098,17 +1126,17 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 				VBar.m l (SymbolMid - arrowHeadSize) (SymbolMid + arrowHeadSize) fine
 
 	do "Double-headed Arrows"
-		DoubleArrow ArrowShape [MangleName 'arrowLeftRight'] [MangleUnicode 0x2194] arrowSB SymbolMid arrowRSB SymbolMid
-		DoubleArrow ThinArrowShape [MangleName 'thinArrowLeftRight'] null arrowSB SymbolMid arrowRSB SymbolMid
-		DoubleArrow ArrowShape [MangleName 'arrowUpDown'] [MangleUnicode 0x2195] arrowMidX arrowTop arrowMidX arrowBot
-		DoubleArrow ArrowShape [MangleName 'arrowUpDown.bottomSpaceLeft'] nothing arrowMidX arrowTop arrowMidX (arrowBot + arrowSw * 1.5)
-		DoubleArrow ArrowShape [MangleName 'arrowUpLeftAndDownRight'] [MangleUnicode 0x2921] arrowDiagSB arrowDiagTop arrowDiagRSB arrowDiagBot
-		DoubleArrow ArrowShape [MangleName 'arrowUpRightAndDownLeft'] [MangleUnicode 0x2922] arrowDiagRSB arrowDiagTop arrowDiagSB arrowDiagBot
+		DoubleArrow ArrowShape [MangleName 'arrowLeftRight'] [MangleUnicode 0x2194] arrowDoubleSB SymbolMid arrowDoubleRSB SymbolMid
+		DoubleArrow ThinArrowShape [MangleName 'thinArrowLeftRight'] null arrowDoubleSB SymbolMid arrowDoubleRSB SymbolMid
+		DoubleArrow ArrowShape [MangleName 'arrowUpDown'] [MangleUnicode 0x2195] arrowMidX arrowDoubleTop arrowMidX arrowDoubleBot
+		DoubleArrow ArrowShape [MangleName 'arrowUpDown.bottomSpaceLeft'] nothing arrowMidX arrowDoubleTop arrowMidX (arrowDoubleBot + arrowSw * 1.5)
+		DoubleArrow ArrowShape [MangleName 'arrowUpLeftAndDownRight'] [MangleUnicode 0x2921] arrowDoubleDiagSB arrowDoubleDiagTop arrowDoubleDiagRSB arrowDoubleDiagBot
+		DoubleArrow ArrowShape [MangleName 'arrowUpRightAndDownLeft'] [MangleUnicode 0x2922] arrowDoubleDiagRSB arrowDoubleDiagTop arrowDoubleDiagSB arrowDoubleDiagBot
 
-		DoubleArrow TrigArrowShape [MangleName 'trigArrowLeftRight'] [MangleUnicode 0x2B64] arrowSB SymbolMid arrowRSB SymbolMid
-		DoubleArrow TrigArrowShape [MangleName 'trigArrowUpDown'] [MangleUnicode 0x2B65] arrowMidX arrowTop arrowMidX arrowBot
+		DoubleArrow TrigArrowShape [MangleName 'trigArrowLeftRight'] [MangleUnicode 0x2B64] arrowDoubleSB SymbolMid arrowDoubleRSB SymbolMid
+		DoubleArrow TrigArrowShape [MangleName 'trigArrowUpDown'] [MangleUnicode 0x2B65] arrowDoubleMidX arrowDoubleTop arrowMidX arrowDoubleBot
 
-		DoubleArrow OpenArrowShape [MangleName 'openHeadArrowLeftRight'] [MangleUnicode 0x21FF] arrowSB SymbolMid arrowRSB SymbolMid
+		DoubleArrow OpenArrowShape [MangleName 'openHeadArrowLeftRight'] [MangleUnicode 0x21FF] arrowDoubleSB SymbolMid arrowDoubleRSB SymbolMid
 
 		create-glyph [MangleName 'arrowUpDownBar'] [MangleUnicode 0x21A8] : composite-proc
 			refer-glyph : MangleName 'arrowUpDown.bottomSpaceLeft'
@@ -1121,8 +1149,8 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 
 	do "Double-line Double-headed Arrows"
 		define dasw doubleArrowStemWidth
-		DoubleArrow [DoubleArrowShape dasw] [MangleName 'dblArrowLeftRight'] [MangleUnicode 0x21D4] arrowSB SymbolMid arrowRSB SymbolMid
-		DoubleArrow [DoubleArrowShape dasw] [MangleName 'dblArrowUpDown'] [MangleUnicode 0x21D5] arrowMidX arrowTop arrowMidX arrowBot
+		DoubleArrow [DoubleArrowShape dasw] [MangleName 'dblArrowLeftRight'] [MangleUnicode 0x21D4] arrowDoubleSB SymbolMid arrowDoubleRSB SymbolMid
+		DoubleArrow [DoubleArrowShape dasw] [MangleName 'dblArrowUpDown'] [MangleUnicode 0x21D5] arrowDoubleMidX arrowDoubleTop arrowDoubleMidX arrowDoubleBot
 
 		if (MosaicWidthScalar > 1 && !para.forceMonospace) : do
 			define l : mix 0 arrowSB kLongArrowSB
@@ -1130,10 +1158,10 @@ glyph-block Symbol-Arrow : for-width-kinds WideWidth1
 			DoubleArrow [DoubleArrowShape dasw] 'longDblArrowLeftRight' 0x27FA l SymbolMid r SymbolMid
 
 	do "Same-side Double-headed Arrows"
-		MkArrow dhArrowShape [MangleName 'dhArrowLeft'] [MangleUnicode 0x219E] arrowRSB SymbolMid arrowSB SymbolMid
-		MkArrow dhArrowShape [MangleName 'dhArrowRight'] [MangleUnicode 0x21A0] arrowSB SymbolMid arrowRSB SymbolMid
-		MkArrow dhArrowShape [MangleName 'dhArrowUp'] [MangleUnicode 0x219F] arrowMidX arrowBot arrowMidX arrowTop
-		MkArrow dhArrowShape [MangleName 'dhArrowDown'] [MangleUnicode 0x21A1] arrowMidX arrowTop arrowMidX arrowBot
+		MkArrow dhArrowShape [MangleName 'dhArrowLeft'] [MangleUnicode 0x219E] arrowRSB SymbolMid arrowSB SymbolMid nothing bendArrowHeadSize
+		MkArrow dhArrowShape [MangleName 'dhArrowRight'] [MangleUnicode 0x21A0] arrowSB SymbolMid arrowRSB SymbolMid nothing bendArrowHeadSize
+		MkArrow dhArrowShape [MangleName 'dhArrowUp'] [MangleUnicode 0x219F] arrowMidX arrowBot arrowMidX arrowTop nothing bendArrowHeadSize
+		MkArrow dhArrowShape [MangleName 'dhArrowDown'] [MangleUnicode 0x21A1] arrowMidX arrowTop arrowMidX arrowBot nothing bendArrowHeadSize
 
 	do "Head-and-Tail Arrows"
 		MkArrow htArrowShape [MangleName 'htArrowLeft'] [MangleUnicode 0x21A2] arrowRSB SymbolMid arrowSB SymbolMid
diff --git a/packages/font-glyphs/src/symbol/ligation.ptl b/packages/font-glyphs/src/symbol/ligation.ptl
index 5406718..e452a1a 100644
--- a/packages/font-glyphs/src/symbol/ligation.ptl
+++ b/packages/font-glyphs/src/symbol/ligation.ptl
@@ -26,13 +26,25 @@ glyph-block Symbol-Ligation : begin
 	define RodBarHOffset : 0.5 * Width - [HSwToV HalfStroke] - RodBarHGap
 
 	# Arrow parameters
-	define arrowheadSlope : 1 / LessSlope
-
-	local arrowExtend : clamp 0 Width (RightSB - 0.5 * OperatorStroke * arrowheadSlope)
-	local arrowJ      : clamp 0 Width (SB + 0.5 * OperatorStroke * arrowheadSlope)
-
-	local dblExtend : clamp 0 Width (RightSB - EqualHalfSpace * arrowheadSlope)
-	local dblArrowJ : clamp 0 Width (SB + EqualHalfSpace * arrowheadSlope)
+	define arrowheadSlope (1 / 2)
+
+	# Mirror unicode arrows
+	# Ideally this would be imported from "Symbol-Arrow", or a better fix would be
+	# to move these to a "common" glyph module. But for convenience they are just copied.
+	local arrowSw         OperatorStroke
+	local arrowWidth    : Width * 2 - SB * 4
+	local arrowSB       : Width - arrowWidth / 2
+	local arrowRSB      : Width - arrowSB
+	local arrowHeadSize : SymbolMid - arrowSw * 0.5 * Math.SQRT1_2
+	local o : O * 2
+
+	local arrowShift  : OperatorStroke * arrowheadSlope - o
+	local arrowExtend : clamp 0 Width (arrowRSB - arrowShift)
+	local arrowJ      : clamp 0 Width (arrowSB + arrowShift)
+
+	local dblShift  : (EqualHalfSpace + OperatorStroke) * arrowheadSlope - o
+	local dblExtend : clamp 0 Width (arrowRSB - dblShift)
+	local dblArrowJ : clamp 0 Width (arrowSB + dblShift)
 
 	define [HyphenNotch x] : union
 		VBar.m x (SymbolMid + OperatorStroke / 3) (SymbolMid + OperatorStroke) EqualHoleWidth
@@ -43,18 +55,15 @@ glyph-block Symbol-Ligation : begin
 		define [ArrowBarConfig extend kern join doubleBar] : begin
 			define cleft O
 			define cright (Width - O)
-			define arrowr : if doubleBar
-				Width + SB + [HSwToV OperatorStroke]
-				Width + extend
-			define arrowl : if doubleBar
-				-Width + RightSB - [HSwToV OperatorStroke]
-				0 - extend
-			define zleft : cleft - Width + RightSB
-			define zright : cright + SB
+			# Ensure double and single arrows use the same bar measurements
+			define arrowr : Width + extend
+			define arrowl : 0 - extend
+			define zleft : cleft - Width + arrowRSB
+			define zright : cright + arrowSB
 			define lk : object
-				x    (SB - Width)
+				x    (arrowSB - Width)
 				y    (-join - Width)
-				f    SB
+				f    arrowSB
 				p    (arrowl + Width)
 				l    arrowl
 				l1 : arrowl - kern
@@ -63,12 +72,13 @@ glyph-block Symbol-Ligation : begin
 				j    (-join)
 				j1   (-join - kern)
 				z    zleft
-				lx : mix arrowl 0 0.5
+				# Replaced with a variant that gives the arrow head more space
+				lx   (cleft + (arrowRSB - Width))
 
 			define rk : object
-				x    (RightSB + Width)
+				x    (arrowRSB + Width)
 				y    (2 * Width + join)
-				f    RightSB
+				f    arrowRSB
 				p    (arrowr - Width)
 				r    arrowr
 				r1 : arrowr + kern
@@ -102,10 +112,10 @@ glyph-block Symbol-Ligation : begin
 						include : SetJoiningKind lS rS
 						include : difference
 							Shape left right
-							if (fNotch && left < (SB - Width))       [Notch (-Width)]    [no-shape]
-							if (fNotch && left < SB)                 [Notch 0]           [no-shape]
-							if (fNotch && right > RightSB)           [Notch Width]       [no-shape]
-							if (fNotch && right > (RightSB + Width)) [Notch (2 * Width)] [no-shape]
+							if (fNotch && left < (arrowSB - Width))   [Notch (-Width)]    [no-shape]
+							if (fNotch && left < arrowSB)             [Notch 0]           [no-shape]
+							if (fNotch && right > arrowRSB)           [Notch Width]       [no-shape]
+							if (fNotch && right > (arrowRSB + Width)) [Notch (2 * Width)] [no-shape]
 
 				select-variant "\(prefix).lig.\(lS)\(rS)"
 					follow -- "lig-\(prefix)"
@@ -115,12 +125,14 @@ glyph-block Symbol-Ligation : begin
 
 	do "Waves"
 		glyph-block-import Shared-Symbol-Shapes : CreateWaveShape
-		define WaveShape : CreateWaveShape (EqualHalfSpace + 0.5 * OperatorStroke) OperatorStroke (-1 / 4)
+		# Make wave about the same height as a tilde, remove phase shift
+		define WaveShape : CreateWaveShape (EqualHalfSpace + OperatorStroke) OperatorStroke 0
 
 		define LR  (2  / 32)
 		define LR1 (9  / 32)
-		define Z   (1  / 4)
-		define F   (-1 / 4)
+		define Z   (1  / 8)
+		define F   (-1 / 8)
+		define F1  (-1 / 8)
 		define C   0
 		define J   (-1 / 8)
 
@@ -128,6 +140,7 @@ glyph-block Symbol-Ligation : begin
 			l    { LR   (-arrowExtend)                           false }
 			l1   { LR1  (-arrowExtend - arrowheadsKern)          false }
 			f    { F    nothing                                  false }
+			f1   { F1   nothing                                  false }
 			z    { Z    nothing                                  false }
 			c    { C    nothing                                  false }
 			m    { J    (0 - RodBarHOffset)                       true }
@@ -138,12 +151,19 @@ glyph-block Symbol-Ligation : begin
 			r    { LR   (Width + arrowExtend)                    false }
 			r1   { LR1  (Width + arrowExtend + arrowheadsKern)   false }
 			f    { F    nothing                                  false }
+			f1   { F1   nothing                                  false }
 			z    { Z    nothing                                  false }
 			c    { C    nothing                                  false }
 			m    { J    (Width + RodBarHOffset)                   true }
 			j    { J    (Width + arrowJ)                          true }
 			j1   { J    (Width + arrowJ + arrowheadsKern)         true }
 
+        # Along with the above, applies frequency shaping to short waves
+        # this allows the wave ends to better match the tilde shape it replaces
+		define shapeFreqs : object
+			f1c  (-1.2)
+			cf1  (1.2)
+
 		foreach [lS : items-of : Object.keys lk] : foreach [rS : items-of : Object.keys rk] : create-glyph"wave.lig.\(lS)\(rS)" : glyph-proc
 			include : SetJoiningKind lS rS
 			local {tL jL djL} lk.(lS)
@@ -155,15 +175,35 @@ glyph-block Symbol-Ligation : begin
 				xfJoin -- jR
 				diagJoinS -- djL
 				diagJoinF -- djR
+				shapeFreq -- [fallback shapeFreqs.("\(lS)\(rS)") 0]
 
 
 	do "Arrowheads"
 		glyph-block-import Symbol-Math-Relation-Common : dH
 		glyph-block-import Symbol-Math-Relation-Inequality : LigationLessShape LigationGreaterShape
 
+		define [ArrowHead x1 y1 x2 y2 _size] : union
+			LHSHalfArrowHead x1 y1 x2 y2 0 _size
+			RHSHalfArrowHead x1 y1 x2 y2 0 _size
+
+		define [LHSHalfArrowHead x1 y1 x2 y2 width _size] : begin
+			local size : fallback _size arrowHeadSize
+			return : new-glyph : PointingTo x1 y1 x2 y2 : lambda [mag] : dispiro
+				widths.lhs arrowSw
+				flat (o) (width / 2)
+				curl (o + size) (-size)
+
+		define [RHSHalfArrowHead x1 y1 x2 y2 width _size] : begin
+			local size : fallback _size arrowHeadSize
+			return : new-glyph : PointingTo x1 y1 x2 y2 : lambda [mag] : dispiro
+				widths.rhs arrowSw
+				flat (o) (-width / 2)
+				curl (o + size) (size)
+
 		create-glyph 'less.lig.dblhead' : glyph-proc
 			Joining.set currentGlyph Joining.Classes.Right
-			include : LigationLessShape (SymbolMid + dH) (SymbolMid - dH) SB RightSB OperatorStroke OperatorStroke (2 * EqualHalfSpace)
+			# Replaced with an arrow head
+			include : ArrowHead arrowRSB SymbolMid arrowSB SymbolMid
 			create-aliased-glyph 'less.lig.dblhead.mid'
 			create-forked-glyph 'less.lig.dblhead.shift1' : glyph-proc
 				Joining.set currentGlyph Joining.Classes.Mid
@@ -171,7 +211,8 @@ glyph-block Symbol-Ligation : begin
 
 		create-glyph 'greater.lig.dblhead' : glyph-proc
 			Joining.set currentGlyph Joining.Classes.Left
-			include : LigationGreaterShape (SymbolMid + dH) (SymbolMid - dH) SB RightSB OperatorStroke OperatorStroke (2 * EqualHalfSpace)
+			# Replaced with an arrow head
+			include : ArrowHead arrowSB SymbolMid arrowRSB SymbolMid
 			create-aliased-glyph 'greater.lig.dblhead.mid'
 			create-forked-glyph 'greater.lig.dblhead.shift1' : glyph-proc
 				Joining.set currentGlyph Joining.Classes.Mid
@@ -180,8 +221,8 @@ glyph-block Symbol-Ligation : begin
 		derive-glyphs 'exclam.lig.htmlcommentstart' null 'exclam' : function [src gr] : glyph-proc
 			Joining.set currentGlyph Joining.Classes.Mid
 			include : refer-glyph src
-			include : Translate (((RightSB - Width) + (Width - arrowExtend / 2)) / 2 - Middle) 0
-			include : HBar.m (-arrowExtend) (RightSB - Width) SymbolMid OperatorStroke
+			# Replaced with a variant that gives the arrow head more space
+			include : HBar.m (-arrowExtend) SB SymbolMid OperatorStroke
 
 		# Right-shifted >
 		define [ArrowShiftTranslate k] : glyph-proc
@@ -191,65 +232,57 @@ glyph-block Symbol-Ligation : begin
 
 		create-glyph 'greater.lig.shift0' : glyph-proc
 			include [refer-glyph 'greater'] AS_BASE ALSO_METRICS
-			create-aliased-glyph 'greater.lig.shift0.head'
-			create-aliased-glyph 'greater.lig.shift0.mid'
-			create-aliased-glyph 'greater.lig.shift0.anti'
-			create-aliased-glyph 'greater.lig.shiftN0'
-			create-aliased-glyph 'greater.lig.shiftN0.mid'
 			create-forked-glyph 'greater.lig.shift0h'      : ArrowShiftTranslate   0.5
 			create-forked-glyph 'greater.lig.shift1'       : ArrowShiftTranslate   1.0
-			create-forked-glyph 'greater.lig.shift1.head'  : ArrowShiftTranslate   1.0
 			create-forked-glyph 'greater.lig.shift1h'      : ArrowShiftTranslate   1.5
 			create-forked-glyph 'greater.lig.shift2'       : ArrowShiftTranslate   2.0
 			create-forked-glyph 'greater.lig.shiftN0h'     : ArrowShiftTranslate (-0.5)
 			create-forked-glyph 'greater.lig.shiftN1'      : ArrowShiftTranslate (-1.0)
-			create-forked-glyph 'greater.lig.shiftN1.anti' : ArrowShiftTranslate (-1.0)
 			create-forked-glyph 'greater.lig.shiftN1h'     : ArrowShiftTranslate (-1.5)
 			create-forked-glyph 'greater.lig.shiftN2'      : ArrowShiftTranslate (-2.0)
 
+		# Use arrow head glyph
+		create-glyph 'greater.lig.shift0.head' : glyph-proc
+			include : ArrowHead arrowSB SymbolMid arrowRSB SymbolMid
+			create-aliased-glyph 'greater.lig.shift0.mid'
+			create-aliased-glyph 'greater.lig.shift0.anti'
+			create-forked-glyph 'greater.lig.shift1.head'  : ArrowShiftTranslate   1.0
+			create-forked-glyph 'greater.lig.shiftN1.anti' : ArrowShiftTranslate (-1.0)
+
 		create-glyph 'less.lig.shift0' : glyph-proc
 			include [refer-glyph 'less'] AS_BASE ALSO_METRICS
-			create-aliased-glyph 'less.lig.shift0.head'
-			create-aliased-glyph 'less.lig.shift0.mid'
-			create-aliased-glyph 'less.lig.shift0.anti'
-			create-aliased-glyph 'less.lig.shiftN0'
-			create-aliased-glyph 'less.lig.shiftN0.mid'
 			create-forked-glyph 'less.lig.shift0h'      : ArrowShiftTranslate (-0.5)
 			create-forked-glyph 'less.lig.shift1'       : ArrowShiftTranslate (-1.0)
-			create-forked-glyph 'less.lig.shift1.head'  : ArrowShiftTranslate (-1.0)
 			create-forked-glyph 'less.lig.shift1h'      : ArrowShiftTranslate (-1.5)
 			create-forked-glyph 'less.lig.shift2'       : ArrowShiftTranslate (-2.0)
 			create-forked-glyph 'less.lig.shiftN0h'     : ArrowShiftTranslate   0.5
 			create-forked-glyph 'less.lig.shiftN1'      : ArrowShiftTranslate   1.0
-			create-forked-glyph 'less.lig.shiftN1.anti' : ArrowShiftTranslate   1.0
 			create-forked-glyph 'less.lig.shiftN1h'     : ArrowShiftTranslate   1.5
 			create-forked-glyph 'less.lig.shiftN2'      : ArrowShiftTranslate   2.0
 
+		# Use arrow head glyph
+		create-glyph 'less.lig.shift0.head' : glyph-proc
+			include : ArrowHead arrowRSB SymbolMid arrowSB SymbolMid
+			create-aliased-glyph 'less.lig.shift0.mid'
+			create-aliased-glyph 'less.lig.shift0.anti'
+			create-forked-glyph 'less.lig.shift1.head'  : ArrowShiftTranslate (-1.0)
+			create-forked-glyph 'less.lig.shiftN1.anti' : ArrowShiftTranslate   1.0
+
 		define [ArrowHeadHole] : Rect (SymbolMid + EqualHalfSpace - 0.5 * OperatorStroke) (SymbolMid - EqualHalfSpace + 0.5 * OperatorStroke) (-Width) (2 * Width)
 
 		create-glyph 'less.lig.hole' : glyph-proc
 			Joining.set currentGlyph Joining.Classes.Left
 			include : difference
-				glyph-proc : include : refer-glyph "less"
+				glyph-proc : include : refer-glyph "less.lig.shift0.head"
 				ArrowHeadHole
+			create-forked-glyph 'less.lig.hole.shiftN1' : ArrowShiftTranslate 1.0
 
 		create-glyph 'greater.lig.hole' : glyph-proc
 			Joining.set currentGlyph Joining.Classes.Right
 			include : difference
-				glyph-proc : include : refer-glyph "greater"
-				ArrowHeadHole
-
-		create-glyph 'less.lig.hole.shiftN1' : glyph-proc
-			Joining.set currentGlyph Joining.Classes.Mid
-			include : difference
-				glyph-proc : include : refer-glyph "less.lig.shiftN1"
-				ArrowHeadHole
-
-		create-glyph 'greater.lig.hole.shiftN1' : glyph-proc
-			Joining.set currentGlyph Joining.Classes.Mid
-			include : difference
-				glyph-proc : include : refer-glyph "greater.lig.shiftN1"
+				glyph-proc : include : refer-glyph "greater.lig.shift0.head"
 				ArrowHeadHole
+			create-forked-glyph 'greater.lig.hole.shiftN1' : ArrowShiftTranslate (-1.0)
 
 	do "bottom sign derivatives"
 		glyph-block-import Symbol-Punctuation-Dashes : UnderScoreConfig
diff --git a/packages/font-glyphs/src/symbol/math/arith.ptl b/packages/font-glyphs/src/symbol/math/arith.ptl
index e5ca318..9bf5d21 100644
--- a/packages/font-glyphs/src/symbol/math/arith.ptl
+++ b/packages/font-glyphs/src/symbol/math/arith.ptl
@@ -80,7 +80,9 @@ glyph-block Symbol-Math-Arith : begin
 			include : VBar.m ([mix SB RightSB (3/4)] + (1/8) * [HSwToV OperatorStroke]) PlusTop PlusBot fine
 
 	do "Multiply"
-		define Size : 0.5 * (RightSB - SB) + 0.25 * SB
+		# Make multiply the same visual size as a plus operator
+		# TODO: Does this break bowtie glyphs?
+		define Size : 0.5 * (RightSB - SB) - 0.5 * OperatorStroke
 		define swBowtie : AdviceStroke 4.25
 		define swBowtieHv : AdviceStroke 4.75
 
@@ -117,6 +119,10 @@ glyph-block Symbol-Math-Arith : begin
 			include : refer-glyph "multiply"
 			include : HBar.b (Middle - Size) (Middle + Size) 0 OperatorStroke
 
+		# Used for the x multiply ligature
+		create-glyph "x.multiply" : glyph-proc
+			include : refer-glyph "multiply"
+
 		alias 'vectorOrCrossProduct' 0x2A2F 'multiply'
 
 		create-glyph 'multiplyInMulDiv' : glyph-proc
diff --git a/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl b/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl
index 9ece5e7..059a66e 100644
--- a/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl
+++ b/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl
@@ -21,7 +21,10 @@ glyph-block Symbol-Punctuation-Ascii-Marks : begin
 
 	create-glyph 'asciiTilde.low' : composite-proc
 		refer-glyph 'asciiTilde.high'
-		ApparentTranslate 0 (SymbolMid - XH - AccentStackOffset)
+		# Adjust tilde to be center-aligned
+		# TODO: I'm sure there's a more correct formula to represent this, however
+		# given current metrics this looks correct.
+		ApparentTranslate 0 (SymbolMid - XH - (AccentStackOffset * 0.75))
 		MarkSet.plus
 	create-glyph 'asciiCaret.medium' : composite-proc
 		refer-glyph 'asciiCaret.high'
diff --git a/packages/font-glyphs/src/symbol/shared.ptl b/packages/font-glyphs/src/symbol/shared.ptl
index b46689f..2a6aa62 100644
--- a/packages/font-glyphs/src/symbol/shared.ptl
+++ b/packages/font-glyphs/src/symbol/shared.ptl
@@ -14,11 +14,16 @@ glyph-block Shared-Symbol-Shapes : begin
 		define WaveMagnitude : dist * (3 / 4) - sw / 2
 		define WaveAdj : TanSlope * WaveMagnitude * (-0.75)
 		define phaseShift : fallback _phaseShift 0
-		define [WaveShapeImpl] : with-params [left right ts te xsJoin xfJoin diagJoinS diagJoinF] : glyph-proc
+		# Adds shapeFreq, which uses a power function to increase wave frequency from a given end
+		define [WaveShapeImpl] : with-params [left right ts te xsJoin xfJoin diagJoinS diagJoinF shapeFreq] : glyph-proc
 			local resolution : Math.ceil (WaveResolution * (te - ts))
 			local knots {}
 			foreach [pr : range 0 till resolution] : begin
-				local theta : (phaseShift + [mix ts te (pr / resolution)]) * Math.PI * 2
+				local rawStep : mix ts te (pr / resolution)
+				local step : if (shapeFreq > 0)
+					[Math.pow (rawStep + 1) shapeFreq] - 1
+					if (shapeFreq < 0) (1 - [Math.pow (2 - rawStep) (-1 * shapeFreq)]) rawStep
+				local theta : (phaseShift + step) * Math.PI * 2
 				local waveRelY : [Math.sin theta] + 0.075 * [Math.sin (theta * 3)]
 				knots.push : g2
 					(WaveAdj * waveRelY) + [mix left right (pr / resolution)]
@@ -33,7 +38,7 @@ glyph-block Shared-Symbol-Shapes : begin
 					list [g2                   xfJoin SymbolMid]
 					list [straight.right.end   xfJoin SymbolMid]
 
-		define [WaveShape] : with-params [left right xsJoin xfJoin diagJoinS diagJoinF [waveCount 1] [unitWidth Width]] : WaveShapeImpl (unitWidth * -left) (unitWidth * (1 + right)) (-left * waveCount) ((1 + right) * waveCount) xsJoin xfJoin diagJoinS diagJoinF
+		define [WaveShape] : with-params [left right xsJoin xfJoin diagJoinS diagJoinF [waveCount 1] [unitWidth Width] [shapeFreq 0]] : WaveShapeImpl (unitWidth * -left) (unitWidth * (1 + right)) (-left * waveCount) ((1 + right) * waveCount) xsJoin xfJoin diagJoinS diagJoinF shapeFreq
 		return WaveShape
 
 	glyph-block-export TriangleShape
diff --git a/packages/font-otl/src/gsub-ligation.ptl b/packages/font-otl/src/gsub-ligation.ptl
index f3301b5..c269dce 100644
--- a/packages/font-otl/src/gsub-ligation.ptl
+++ b/packages/font-otl/src/gsub-ligation.ptl
@@ -11,14 +11,14 @@ define look-around null
 define advance : lambda [t] null
 define ident : lambda [t] : t.map : lambda [x] x
 
-export : define [buildLigations gsub para plm] : begin
+export : define [buildLigations gsub glyphStore para plm] : begin
 	# Initialize features
 	define features : new Map
 	foreach [ { featureTag } : pairs-of plm] : begin
 		local feature : gsub.addCommonFeature : gsub.createFeature featureTag
 		features.set featureTag feature
 
-	buildLigationsImpl gsub para [DoLigGroupT gsub plm features]
+	buildLigationsImpl gsub glyphStore para [DoLigGroupT gsub plm features]
 
 define [DoLigGroupT gsub plm features] : function [F] : begin
 	define deDupeGroups : new Map
@@ -88,13 +88,14 @@ define-macro LigGroup : syntax-rules
 ###################################################################################################
 ###################################################################################################
 
-define [buildLigationsImpl gsub para $LigGroup$] : begin
+define [buildLigationsImpl gsub glyphStore para $LigGroup$] : begin
 	define { chain-rule reverse-rule } : gsub.ChainRuleBuilder
 
 	define less {'less'}
-	define lessAndEquiv {'less' 'less.lig.shift0' 'less.lig.shift0.anti'}
+	# TODO: are these equiv the right ones? need to investigate
+	define lessAndEquiv {'less' 'less.lig.shift0' } #'less.lig.shift0.anti'}
 	define greater {'greater'}
-	define greaterAndEquiv {'greater' 'greater.lig.shift0' 'greater.lig.shift0.anti'}
+	define greaterAndEquiv {'greater' 'greater.lig.shift0' } # 'greater.lig.shift0.anti'}
 	define lessOrGreater         : {}.concat less         greater
 	define lessOrGreaterAndEquiv : {}.concat lessAndEquiv greaterAndEquiv
 
@@ -112,6 +113,91 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 
 	define regexLookAround [less.concat hyphen equal exclam greater anyBar]
 
+	# Adds ligatures for x multiply and numeric literals
+	define alpha {}
+	foreach [j : range 0 26] : alpha.push
+		glyphStore.queryNameByUnicode (['a'.charCodeAt 0] + j)
+		glyphStore.queryNameByUnicode (['A'.charCodeAt 0] + j)
+
+	define digit {}
+	foreach [j : range 0 9] : digit.push
+		glyphStore.queryNameByUnicode (['0'.charCodeAt 0] + j)
+
+	define zero       {digit.0}
+	define binDigit : digit.slice 0 2
+	define octDigit : digit.slice 0 8
+	define hexDigit : digit.concat : alpha.slice 0 12
+	define numeric  : digit.concat {'period' 'underscore'}
+	define alphaNum : alpha.concat numeric
+
+	define numericLiterals {{{'b'} binDigit} {{'o'} octDigit} {{'x'} hexDigit}}
+
+	LigGroup "Numeric literals" : if [hasLG 'numeric-literals'] : begin
+		foreach { baseLetter baseDigit } numericLiterals : begin
+			local notBaseDigit : alphaNum.filter : x => : not : baseDigit.includes x
+
+			CreateLigationLookup : list
+				chain-rule
+					alphaNum            ~> look-around
+					zero                ~> look-around
+					baseLetter          ~> advance
+				chain-rule
+					baseLetter          ~> advance
+					baseDigit           ~> look-around
+					notBaseDigit        ~> look-around
+				chain-rule
+					baseLetter          ~> advance
+					baseDigit           ~> look-around
+					baseDigit           ~> look-around
+					notBaseDigit        ~> look-around
+				chain-rule
+					baseLetter          ~> advance
+					baseDigit           ~> look-around
+					baseDigit           ~> look-around
+					baseDigit           ~> look-around
+					notBaseDigit        ~> look-around
+				chain-rule
+					zero                ~> look-around
+					baseLetter          ~> {"numericbase{\(baseLetter.0)}"}
+					baseDigit           ~> look-around
+
+	LigGroup "X-Multiply" : if [hasLG 'x-multiply'] : begin
+		CreateLigationLookup : list
+			chain-rule
+				alpha          ~> look-around
+				numeric        ~> look-around
+				numeric        ~> look-around
+				digit          ~> look-around
+				{'x'}          ~> advance
+			chain-rule
+				alpha          ~> look-around
+				numeric        ~> look-around
+				digit          ~> look-around
+				{'x'}          ~> advance
+			chain-rule
+				alpha          ~> look-around
+				digit          ~> look-around
+				{'x'}          ~> advance
+			chain-rule
+				{'x'}          ~> advance
+				digit          ~> look-around
+				alpha          ~> look-around
+			chain-rule
+				{'x'}          ~> advance
+				digit          ~> look-around
+				numeric        ~> look-around
+				alpha          ~> look-around
+			chain-rule
+				{'x'}          ~> advance
+				digit          ~> look-around
+				numeric        ~> look-around
+				numeric        ~> look-around
+				alpha          ~> look-around
+			chain-rule # 2x2
+				digit          ~> look-around
+				{'x'}          ~> {'x.multiply'}
+				digit          ~> look-around
+
 	LigGroup "Bracket-star" : if [hasLG 'brst'] : begin
 		CreateLigationLookup : list
 			chain-rule # (*
@@ -350,9 +436,9 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				equal      ~> look-around
 				equal      ~> look-around
 			chain-rule # <<<=
-				less       ~> [lsx 'shiftN0h']
+				less       ~> [lsx 'shiftN2']
+				less       ~> [lsx 'shiftN1']
 				less       ~> look-around
-				less       ~> [lsx 'shift0h']
 				equal      ~> look-around
 			chain-rule # =>>>=
 				equal      ~> look-around
@@ -367,9 +453,9 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				equal      ~> look-around
 				equal      ~> look-around
 			chain-rule # >>>=
-				greater    ~> [lsx 'shift0h']
+				greater    ~> [lsx 'shift2']
+				greater    ~> [lsx 'shift1']
 				greater    ~> look-around
-				greater    ~> [lsx 'shiftN0h']
 				equal      ~> look-around
 			chain-rule # =<<=
 				equal      ~> look-around
@@ -382,8 +468,8 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				equal      ~> look-around
 				equal      ~> look-around
 			chain-rule # <<=
-				less       ~> [lsx 'shiftN0h']
-				less       ~> [lsx 'shift0h']
+				less       ~> [lsx 'shiftN1']
+				less       ~> look-around
 				equal      ~> look-around
 			chain-rule # =>>=
 				equal      ~> look-around
@@ -396,8 +482,8 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				equal      ~> look-around
 				equal      ~> look-around
 			chain-rule # >>=
-				greater    ~> [lsx 'shift0h']
-				greater    ~> [lsx 'shiftN0h']
+				greater    ~> [lsx 'shift1']
+				greater    ~> look-around
 				equal      ~> look-around
 
 	LigGroup "HTML Comment" : if [hasLG 'html-comment'] : begin
@@ -465,16 +551,17 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				regexLookAround ~> advance
 				regexLookAround ~> advance
 
-			define [CJoinHeadForce]         : if dbl [lsx 'dblhead']        [lsx 'shift0.head']
-			define [CJoinHeadMid]           : if dbl [lsx 'dblhead.mid']    [lsx 'shift0.mid']
-			define [CJoinHeadForceShift1]   : if dbl [lsx 'dblhead.shift1'] [lsx 'shift1.head']
+			# Use simplified double arrow heads
+			define [CJoinHeadForce]           [lsx 'shift0.head']
+			define [CJoinHeadMid]           : if dbl [lsx 'hole']           [lsx 'shift0.mid']
+			define [CJoinHeadForceShift1]     [lsx 'shift1.head']
 			define [CAntiHeadForce]         : if dbl [lsx 'hole']           [lsx 'shift0.anti']
 			define [CAntiHeadForceShiftN1]  : if dbl [lsx 'hole.shiftN1']   [lsx 'shiftN1.anti']
 
 			define [LJoinHeadForce]         : if [hasLG 'arrow-l']                          [CJoinHeadForce]        advance
 			define [LJoinHeadForceLR]       : if ([hasLG 'arrow-l'] || [hasLG 'arrow-lr'])  [CJoinHeadForce]        advance
 			define [LJoinHeadForceShift1]   : if [hasLG 'arrow-l']                          [CJoinHeadForceShift1]  advance
-			define [LJoinHeadForceShift1LR] : if ([hasLG 'arrow-l'] || [hasLG 'arrow-lr'])  [CJoinHeadForce]        advance
+			define [LJoinHeadForceShift1LR] : if ([hasLG 'arrow-l'] || [hasLG 'arrow-lr'])  [CJoinHeadForceShift1]  advance
 			define [LMiddleHead]            : if [hasLG 'counter-arrow-l']                  [CJoinHeadMid] : if [hasLG 'arrow-l'] [LJoinHeadForce] advance
 			define [LAntiHeadForce]         : if [hasLG 'counter-arrow-l']                  [CAntiHeadForce]        advance
 			define [LAntiHeadForceShiftN1]  : if [hasLG 'counter-arrow-l']                  [CAntiHeadForceShiftN1] advance
@@ -482,7 +569,7 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 			define [RJoinHeadForce]         : if [hasLG 'arrow-r']                          [CJoinHeadForce]        advance
 			define [RJoinHeadForceLR]       : if ([hasLG 'arrow-r'] || [hasLG 'arrow-lr'])  [CJoinHeadForce]        advance
 			define [RJoinHeadForceShift1]   : if [hasLG 'arrow-r']                          [CJoinHeadForceShift1]  advance
-			define [RJoinHeadForceShift1LR] : if ([hasLG 'arrow-r'] || [hasLG 'arrow-lr'])  [CJoinHeadForce]        advance
+			define [RJoinHeadForceShift1LR] : if ([hasLG 'arrow-r'] || [hasLG 'arrow-lr'])  [CJoinHeadForceShift1]  advance
 			define [RMiddleHead]            : if [hasLG 'counter-arrow-r']                  [CJoinHeadMid] : if [hasLG 'arrow-r'] [RJoinHeadForce] advance
 			define [RAntiHeadForce]         : if [hasLG 'counter-arrow-r']                  [CAntiHeadForce]        advance
 			define [RAntiHeadForceShiftN1]  : if [hasLG 'counter-arrow-r']                  [CAntiHeadForceShiftN1] advance
@@ -538,13 +625,13 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 
 			begin "Dual / Spaceship"
 				heads.push : chain-rule # < < = > >
-					less    ~> look-around
+					less    ~> [LJoinHeadForceLR]
 					less    ~> [LJoinHeadForceShift1LR]
 					rodCls  ~> look-around
 					greater ~> [RJoinHeadForceShift1LR]
-					greater ~> look-around
+					greater ~> [RJoinHeadForceLR]
 				heads.push : chain-rule # < < = >
-					less    ~> look-around
+					less    ~> [LJoinHeadForceLR]
 					less    ~> [LJoinHeadForceShift1LR]
 					rodCls  ~> look-around
 					greater ~> [RJoinHeadForceLR]
@@ -552,7 +639,8 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 					less    ~> [LJoinHeadForceLR]
 					rodCls  ~> look-around
 					greater ~> [RJoinHeadForceShift1LR]
-					greater ~> look-around
+					greater ~> [RJoinHeadForceLR]
+				# TODO: add in advance rule for actual spaceship operator if lt/gt is disabled
 				heads.push : chain-rule # < = >
 					less    ~> [LJoinHeadForceLR]
 					rodCls  ~> look-around
@@ -562,17 +650,17 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				heads.push : chain-rule # = > >
 					rodCls  ~> look-around
 					greater ~> [RJoinHeadForceShift1]
-					greater ~> look-around
+					greater ~> [RJoinHeadForceLR]
 				heads.push : chain-rule # = < <
 					rodCls  ~> look-around
 					less    ~> [LAntiHeadForceShiftN1]
-					less    ~> look-around
+					less    ~> [LJoinHeadForceLR]
 				heads.push : chain-rule # > > =
-					greater ~> look-around
+					greater ~> [RJoinHeadForceLR]
 					greater ~> [RAntiHeadForceShiftN1]
 					rodCls  ~> look-around
 				heads.push : chain-rule # < < =
-					less    ~> look-around
+					less    ~> [LJoinHeadForceLR]
 					less    ~> [LJoinHeadForceShift1]
 					rodCls  ~> look-around
 				heads.push : chain-rule # = = >
@@ -729,13 +817,13 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				regexLookAround ~> advance
 				regexLookAround ~> advance
 			chain-rule # <<<
-				less       ~> [lsx 'shiftN0h']
+				less       ~> [lsx 'shiftN1']
 				less       ~> look-around
-				less       ~> [lsx 'shift0h']
+				less       ~> [lsx 'shift1']
 			chain-rule # >>>
-				greater    ~> [lsx 'shift0h']
+				greater    ~> [lsx 'shift1']
 				greater    ~> look-around
-				greater    ~> [lsx 'shiftN0h']
+				greater    ~> [lsx 'shiftN1']
 			chain-rule # <<
 				less       ~> [lsx 'shiftN0h']
 				less       ~> [lsx 'shift0h']
@@ -744,10 +832,10 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 				greater    ~> [lsx 'shiftN0h']
 
 		# Cancel alternates of < and > shapes if there are more after them
-		local lAll  { "less"    "less.lig.shift0h"    "less.lig.shiftN0h"    }
-		local lNeut { "less"    "less"                "less"                 }
-		local gAll  { "greater" "greater.lig.shift0h" "greater.lig.shiftN0h" }
-		local gNeut { "greater" "greater"             "greater"              }
+		local lAll  { "less"    "less.lig.shift0h"    "less.lig.shiftN0h"    "less.lig.shift1"    "less.lig.shiftN1"    "less.lig.shift2"    "less.lig.shiftN2"    }
+		local lNeut { "less"    "less"                "less"                 "less"               "less"                "less"               "less"                }
+		local gAll  { "greater" "greater.lig.shift0h" "greater.lig.shiftN0h" "greater.lig.shift1" "greater.lig.shiftN1" "greater.lig.shift2" "greater.lig.shiftN2" }
+		local gNeut { "greater" "greater"             "greater"              "greater"            "greater"             "greater"            "greater"             }
 		local lgAll  : lAll.concat  gAll
 		local lgNeut : lNeut.concat gNeut
 		CreateLigationLookup : list
@@ -1018,12 +1106,14 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 					[src] ~> [sfx "cc"]
 					[src] ~> [sfx "cf"]
 				chain-rule # Start 3
-					[src] ~> [sfx "fc"]
+				    # Modified to use variable frequency ends
+					[src] ~> [sfx "f1c"]
 					[src] ~> [sfx "cc"]
-					[src] ~> [sfx "cf"]
+					[src] ~> [sfx "cf1"]
 				chain-rule # Start 2
-					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "fc"] advance]
-					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "cf"] advance]
+				    # Modified to use variable frequency ends
+					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "f1c"] advance]
+					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "cf1"] advance]
 			CreateLigationLookup : list
 				chain-rule
 					{[sfx "jf"]} ~> {[sfx "jc"]}
diff --git a/packages/font-otl/src/gsub-texture.ptl b/packages/font-otl/src/gsub-texture.ptl
index f5286c1..c743563 100644
--- a/packages/font-otl/src/gsub-texture.ptl
+++ b/packages/font-otl/src/gsub-texture.ptl
@@ -9,7 +9,8 @@ export : define [buildGsubTexture gsub glyphStore markGlyphs cvs] : begin
 	local anyMark : Array.from markGlyphs.all
 	local rec : gsub.beginBlock
 
-	define txtr : gsub.addCommonFeature : gsub.createFeature 'TXTR'
+	# Renames TXTR to kern to enable by default in most environments
+	define txtr : gsub.addCommonFeature : gsub.createFeature 'kern'
 	define { chain-rule reverse-rule } : gsub.ChainRuleBuilder
 	define look-around null
 
diff --git a/packages/font-otl/src/index.ptl b/packages/font-otl/src/index.ptl
index bb5e890..e609274 100644
--- a/packages/font-otl/src/index.ptl
+++ b/packages/font-otl/src/index.ptl
@@ -53,7 +53,7 @@ define [buildGSUB para glyphStore markGlyphs] : begin
 		define plm : Object.assign {.} para.ligation.defaultBuildup
 		if (para.ligation.caltBuildup && para.ligation.caltBuildup.length) : begin
 			set plm.calt para.ligation.caltBuildup
-		buildLigations gsub para plm
+		buildLigations gsub glyphStore para plm
 
 	# frac
 	buildFrac gsub glyphStore
diff --git a/params/ligation-set.toml b/params/ligation-set.toml
index 77834a1..f953e8c 100644
--- a/params/ligation-set.toml
+++ b/params/ligation-set.toml
@@ -253,6 +253,14 @@ desc = 'Make 2 or more contiguous hash signs (number signs) (like `##`, `###` an
 samples = ["###", "####"]
 desc = 'Make 3 or more contiguous hash signs (number signs) (like `##` and `###`) connected'
 
+[simple.x-multiply]
+samples = ["2x2"]
+desc = 'Display the letter x as a multiply when between two numbers'
+
+[simple.numeric-literals]
+samples = ["0xF00D", "0o7104", "0b10010111"]
+desc = 'Shows the base in subscript within a numeric literal'
+
 ###################################################################################################
 
 # Non-tagged composites, used for inheritance
diff --git a/params/parameters.toml b/params/parameters.toml
index e06f019..d64087f 100644
--- a/params/parameters.toml
+++ b/params/parameters.toml
@@ -35,9 +35,9 @@ accentWidth = 200       # Width of accent marks.
 accentClearance = 80    # Vertical clearance of accent marks to the base.
 accentHeight = 140      # Height of accent marks.
 accentStackOffset = 205 # Offset height of accent mark stack.
-overshoot = -8          # Vertical overshoot for arcs.
-overshootx = -8         # Horizontal overshoot for arcs.
-oxhook = -2             # Horizontal overshoot for hook tips.
+overshoot = -16         # Vertical overshoot for arcs.
+overshootx = -16        # Horizontal overshoot for arcs.
+oxhook = -4             # Horizontal overshoot for hook tips.
 
 refJut = 85
 
