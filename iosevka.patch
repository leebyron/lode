diff --git a/packages/font-glyphs/src/auto-build/transformed.ptl b/packages/font-glyphs/src/auto-build/transformed.ptl
index 39e7da7..8c62ab1 100644
--- a/packages/font-glyphs/src/auto-build/transformed.ptl
+++ b/packages/font-glyphs/src/auto-build/transformed.ptl
@@ -443,6 +443,12 @@ glyph-block Autobuild-Transformed : begin
 			list 0x1E069 'cyrl/dze'
 			list 0x1E06A 'cyrl/dzhe'
 
+		# Numeric literal base ligation
+		createSubscripts 'numericbase' null : list
+			list null 'b'
+			list null 'o'
+			list null 'x'
+
 		createSubscripts 'denominator' DenominatorForm : list
 			list null 'zero.onum'
 			list null 'one.onum'
@@ -731,6 +737,15 @@ glyph-block Autobuild-Transformed-Texture : begin
 		# link-relations relSets
 
 	define ranges : list
+		# Adds more of ascii, allowing letters to expand into space and punctation
+		list 0x20 0x21
+		list 0x27 0x29
+		list 0x2C 0x2C
+		list 0x2E 0x2E
+		list 0x2E 0x2E
+		list 0x5B 0x5D
+		list 0x60 0x60
+		list 0x6B 0x6D
 		list 0x41 0x5A
 		list 0x61 0x7A
 		list 0xC0 0xFF
@@ -747,8 +762,9 @@ glyph-block Autobuild-Transformed-Texture : begin
 				if source : results.push { null source }
 		return results
 
-	define EXTENSION :  1 / 12
-	define SHRINK    : -1 / 12
+	# More dramatic effect to texture extension and shrink
+	define EXTENSION :  5 / 32
+	define SHRINK    : -5 / 32
 	createTextureDerivatives Texture.ExtL  EXTENSION 0         [jobs 0xF000]
 	createTextureDerivatives Texture.ExtR  0         EXTENSION [jobs 0xF100]
 	createTextureDerivatives Texture.ExtLR EXTENSION EXTENSION [jobs 0xF200]
diff --git a/packages/font-glyphs/src/symbol/ligation.ptl b/packages/font-glyphs/src/symbol/ligation.ptl
index 5406718..83e362f 100644
--- a/packages/font-glyphs/src/symbol/ligation.ptl
+++ b/packages/font-glyphs/src/symbol/ligation.ptl
@@ -115,12 +115,14 @@ glyph-block Symbol-Ligation : begin
 
 	do "Waves"
 		glyph-block-import Shared-Symbol-Shapes : CreateWaveShape
-		define WaveShape : CreateWaveShape (EqualHalfSpace + 0.5 * OperatorStroke) OperatorStroke (-1 / 4)
+		# Make wave about the same height as a tilde, remove phase shift
+		define WaveShape : CreateWaveShape (EqualHalfSpace + OperatorStroke) OperatorStroke 0
 
 		define LR  (2  / 32)
 		define LR1 (9  / 32)
-		define Z   (1  / 4)
-		define F   (-1 / 4)
+		define Z   (1  / 8)
+		define F   (-1 / 8)
+		define F1  (-1 / 8)
 		define C   0
 		define J   (-1 / 8)
 
@@ -128,6 +130,7 @@ glyph-block Symbol-Ligation : begin
 			l    { LR   (-arrowExtend)                           false }
 			l1   { LR1  (-arrowExtend - arrowheadsKern)          false }
 			f    { F    nothing                                  false }
+			f1   { F1   nothing                                  false }
 			z    { Z    nothing                                  false }
 			c    { C    nothing                                  false }
 			m    { J    (0 - RodBarHOffset)                       true }
@@ -138,12 +141,19 @@ glyph-block Symbol-Ligation : begin
 			r    { LR   (Width + arrowExtend)                    false }
 			r1   { LR1  (Width + arrowExtend + arrowheadsKern)   false }
 			f    { F    nothing                                  false }
+			f1   { F1   nothing                                  false }
 			z    { Z    nothing                                  false }
 			c    { C    nothing                                  false }
 			m    { J    (Width + RodBarHOffset)                   true }
 			j    { J    (Width + arrowJ)                          true }
 			j1   { J    (Width + arrowJ + arrowheadsKern)         true }
 
+        # Along with the above, applies frequency shaping to short waves
+        # this allows the wave ends to better match the tilde shape it replaces
+		define shapeFreqs : object
+			f1c  (-1.21)
+			cf1  (1.21)
+
 		foreach [lS : items-of : Object.keys lk] : foreach [rS : items-of : Object.keys rk] : create-glyph"wave.lig.\(lS)\(rS)" : glyph-proc
 			include : SetJoiningKind lS rS
 			local {tL jL djL} lk.(lS)
@@ -155,6 +165,7 @@ glyph-block Symbol-Ligation : begin
 				xfJoin -- jR
 				diagJoinS -- djL
 				diagJoinF -- djR
+				shapeFreq -- [fallback shapeFreqs.("\(lS)\(rS)") 0]
 
 
 	do "Arrowheads"
@@ -180,7 +191,7 @@ glyph-block Symbol-Ligation : begin
 		derive-glyphs 'exclam.lig.htmlcommentstart' null 'exclam' : function [src gr] : glyph-proc
 			Joining.set currentGlyph Joining.Classes.Mid
 			include : refer-glyph src
-			include : Translate (((RightSB - Width) + (Width - arrowExtend / 2)) / 2 - Middle) 0
+			# include : Translate (((RightSB - Width) + (Width - arrowExtend / 2)) / 2 - Middle) 0
 			include : HBar.m (-arrowExtend) (RightSB - Width) SymbolMid OperatorStroke
 
 		# Right-shifted >
diff --git a/packages/font-glyphs/src/symbol/math/arith.ptl b/packages/font-glyphs/src/symbol/math/arith.ptl
index e5ca318..9bf5d21 100644
--- a/packages/font-glyphs/src/symbol/math/arith.ptl
+++ b/packages/font-glyphs/src/symbol/math/arith.ptl
@@ -80,7 +80,9 @@ glyph-block Symbol-Math-Arith : begin
 			include : VBar.m ([mix SB RightSB (3/4)] + (1/8) * [HSwToV OperatorStroke]) PlusTop PlusBot fine
 
 	do "Multiply"
-		define Size : 0.5 * (RightSB - SB) + 0.25 * SB
+		# Make multiply the same visual size as a plus operator
+		# TODO: Does this break bowtie glyphs?
+		define Size : 0.5 * (RightSB - SB) - 0.5 * OperatorStroke
 		define swBowtie : AdviceStroke 4.25
 		define swBowtieHv : AdviceStroke 4.75
 
@@ -117,6 +119,10 @@ glyph-block Symbol-Math-Arith : begin
 			include : refer-glyph "multiply"
 			include : HBar.b (Middle - Size) (Middle + Size) 0 OperatorStroke
 
+		# Used for the x multiply ligature
+		create-glyph "x.multiply" : glyph-proc
+			include : refer-glyph "multiply"
+
 		alias 'vectorOrCrossProduct' 0x2A2F 'multiply'
 
 		create-glyph 'multiplyInMulDiv' : glyph-proc
diff --git a/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl b/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl
index 9ece5e7..059a66e 100644
--- a/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl
+++ b/packages/font-glyphs/src/symbol/punctuation/ascii-marks.ptl
@@ -21,7 +21,10 @@ glyph-block Symbol-Punctuation-Ascii-Marks : begin
 
 	create-glyph 'asciiTilde.low' : composite-proc
 		refer-glyph 'asciiTilde.high'
-		ApparentTranslate 0 (SymbolMid - XH - AccentStackOffset)
+		# Adjust tilde to be center-aligned
+		# TODO: I'm sure there's a more correct formula to represent this, however
+		# given current metrics this looks correct.
+		ApparentTranslate 0 (SymbolMid - XH - (AccentStackOffset * 0.75))
 		MarkSet.plus
 	create-glyph 'asciiCaret.medium' : composite-proc
 		refer-glyph 'asciiCaret.high'
diff --git a/packages/font-glyphs/src/symbol/shared.ptl b/packages/font-glyphs/src/symbol/shared.ptl
index b46689f..2a6aa62 100644
--- a/packages/font-glyphs/src/symbol/shared.ptl
+++ b/packages/font-glyphs/src/symbol/shared.ptl
@@ -14,11 +14,16 @@ glyph-block Shared-Symbol-Shapes : begin
 		define WaveMagnitude : dist * (3 / 4) - sw / 2
 		define WaveAdj : TanSlope * WaveMagnitude * (-0.75)
 		define phaseShift : fallback _phaseShift 0
-		define [WaveShapeImpl] : with-params [left right ts te xsJoin xfJoin diagJoinS diagJoinF] : glyph-proc
+		# Adds shapeFreq, which uses a power function to increase wave frequency from a given end
+		define [WaveShapeImpl] : with-params [left right ts te xsJoin xfJoin diagJoinS diagJoinF shapeFreq] : glyph-proc
 			local resolution : Math.ceil (WaveResolution * (te - ts))
 			local knots {}
 			foreach [pr : range 0 till resolution] : begin
-				local theta : (phaseShift + [mix ts te (pr / resolution)]) * Math.PI * 2
+				local rawStep : mix ts te (pr / resolution)
+				local step : if (shapeFreq > 0)
+					[Math.pow (rawStep + 1) shapeFreq] - 1
+					if (shapeFreq < 0) (1 - [Math.pow (2 - rawStep) (-1 * shapeFreq)]) rawStep
+				local theta : (phaseShift + step) * Math.PI * 2
 				local waveRelY : [Math.sin theta] + 0.075 * [Math.sin (theta * 3)]
 				knots.push : g2
 					(WaveAdj * waveRelY) + [mix left right (pr / resolution)]
@@ -33,7 +38,7 @@ glyph-block Shared-Symbol-Shapes : begin
 					list [g2                   xfJoin SymbolMid]
 					list [straight.right.end   xfJoin SymbolMid]
 
-		define [WaveShape] : with-params [left right xsJoin xfJoin diagJoinS diagJoinF [waveCount 1] [unitWidth Width]] : WaveShapeImpl (unitWidth * -left) (unitWidth * (1 + right)) (-left * waveCount) ((1 + right) * waveCount) xsJoin xfJoin diagJoinS diagJoinF
+		define [WaveShape] : with-params [left right xsJoin xfJoin diagJoinS diagJoinF [waveCount 1] [unitWidth Width] [shapeFreq 0]] : WaveShapeImpl (unitWidth * -left) (unitWidth * (1 + right)) (-left * waveCount) ((1 + right) * waveCount) xsJoin xfJoin diagJoinS diagJoinF shapeFreq
 		return WaveShape
 
 	glyph-block-export TriangleShape
diff --git a/packages/font-otl/src/gsub-ligation.ptl b/packages/font-otl/src/gsub-ligation.ptl
index f3301b5..572c92d 100644
--- a/packages/font-otl/src/gsub-ligation.ptl
+++ b/packages/font-otl/src/gsub-ligation.ptl
@@ -11,14 +11,14 @@ define look-around null
 define advance : lambda [t] null
 define ident : lambda [t] : t.map : lambda [x] x
 
-export : define [buildLigations gsub para plm] : begin
+export : define [buildLigations gsub glyphStore para plm] : begin
 	# Initialize features
 	define features : new Map
 	foreach [ { featureTag } : pairs-of plm] : begin
 		local feature : gsub.addCommonFeature : gsub.createFeature featureTag
 		features.set featureTag feature
 
-	buildLigationsImpl gsub para [DoLigGroupT gsub plm features]
+	buildLigationsImpl gsub glyphStore para [DoLigGroupT gsub plm features]
 
 define [DoLigGroupT gsub plm features] : function [F] : begin
 	define deDupeGroups : new Map
@@ -88,7 +88,7 @@ define-macro LigGroup : syntax-rules
 ###################################################################################################
 ###################################################################################################
 
-define [buildLigationsImpl gsub para $LigGroup$] : begin
+define [buildLigationsImpl gsub glyphStore para $LigGroup$] : begin
 	define { chain-rule reverse-rule } : gsub.ChainRuleBuilder
 
 	define less {'less'}
@@ -112,6 +112,91 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 
 	define regexLookAround [less.concat hyphen equal exclam greater anyBar]
 
+	# Adds ligatures for x multiply and numeric literals
+	define alpha {}
+	foreach [j : range 0 26] : alpha.push
+		glyphStore.queryNameByUnicode (['a'.charCodeAt 0] + j)
+		glyphStore.queryNameByUnicode (['A'.charCodeAt 0] + j)
+
+	define digit {}
+	foreach [j : range 0 9] : digit.push
+		glyphStore.queryNameByUnicode (['0'.charCodeAt 0] + j)
+
+	define zero       {digit.0}
+	define binDigit : digit.slice 0 2
+	define octDigit : digit.slice 0 8
+	define hexDigit : digit.concat : alpha.slice 0 12
+	define numeric  : digit.concat {'period' 'underscore'}
+	define alphaNum : alpha.concat numeric
+
+	define numericLiterals {{{'b'} binDigit} {{'o'} octDigit} {{'x'} hexDigit}}
+
+	LigGroup "Numeric literals" : if [hasLG 'numeric-literals'] : begin
+		foreach { baseLetter baseDigit } numericLiterals : begin
+			local notBaseDigit : alphaNum.filter : x => : not : baseDigit.includes x
+
+			CreateLigationLookup : list
+				chain-rule
+					alphaNum            ~> look-around
+					zero                ~> look-around
+					baseLetter          ~> advance
+				chain-rule
+					baseLetter          ~> advance
+					baseDigit           ~> look-around
+					notBaseDigit        ~> look-around
+				chain-rule
+					baseLetter          ~> advance
+					baseDigit           ~> look-around
+					baseDigit           ~> look-around
+					notBaseDigit        ~> look-around
+				chain-rule
+					baseLetter          ~> advance
+					baseDigit           ~> look-around
+					baseDigit           ~> look-around
+					baseDigit           ~> look-around
+					notBaseDigit        ~> look-around
+				chain-rule
+					zero                ~> look-around
+					baseLetter          ~> {"numericbase{\(baseLetter.0)}"}
+					baseDigit           ~> look-around
+
+	LigGroup "X-Multiply" : if [hasLG 'x-multiply'] : begin
+		CreateLigationLookup : list
+			chain-rule
+				alpha          ~> look-around
+				numeric        ~> look-around
+				numeric        ~> look-around
+				digit          ~> look-around
+				{'x'}          ~> advance
+			chain-rule
+				alpha          ~> look-around
+				numeric        ~> look-around
+				digit          ~> look-around
+				{'x'}          ~> advance
+			chain-rule
+				alpha          ~> look-around
+				digit          ~> look-around
+				{'x'}          ~> advance
+			chain-rule
+				{'x'}          ~> advance
+				digit          ~> look-around
+				alpha          ~> look-around
+			chain-rule
+				{'x'}          ~> advance
+				digit          ~> look-around
+				numeric        ~> look-around
+				alpha          ~> look-around
+			chain-rule
+				{'x'}          ~> advance
+				digit          ~> look-around
+				numeric        ~> look-around
+				numeric        ~> look-around
+				alpha          ~> look-around
+			chain-rule # 2x2
+				digit          ~> look-around
+				{'x'}          ~> {'x.multiply'}
+				digit          ~> look-around
+
 	LigGroup "Bracket-star" : if [hasLG 'brst'] : begin
 		CreateLigationLookup : list
 			chain-rule # (*
@@ -1018,12 +1103,14 @@ define [buildLigationsImpl gsub para $LigGroup$] : begin
 					[src] ~> [sfx "cc"]
 					[src] ~> [sfx "cf"]
 				chain-rule # Start 3
-					[src] ~> [sfx "fc"]
+				    # Modified to use variable frequency ends
+					[src] ~> [sfx "f1c"]
 					[src] ~> [sfx "cc"]
-					[src] ~> [sfx "cf"]
+					[src] ~> [sfx "cf1"]
 				chain-rule # Start 2
-					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "fc"] advance]
-					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "cf"] advance]
+				    # Modified to use variable frequency ends
+					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "f1c"] advance]
+					[src] ~> [if [hasLG "\(gr)-\(gr)"] [sfx "cf1"] advance]
 			CreateLigationLookup : list
 				chain-rule
 					{[sfx "jf"]} ~> {[sfx "jc"]}
diff --git a/packages/font-otl/src/gsub-texture.ptl b/packages/font-otl/src/gsub-texture.ptl
index f5286c1..c743563 100644
--- a/packages/font-otl/src/gsub-texture.ptl
+++ b/packages/font-otl/src/gsub-texture.ptl
@@ -9,7 +9,8 @@ export : define [buildGsubTexture gsub glyphStore markGlyphs cvs] : begin
 	local anyMark : Array.from markGlyphs.all
 	local rec : gsub.beginBlock
 
-	define txtr : gsub.addCommonFeature : gsub.createFeature 'TXTR'
+	# Renames TXTR to kern to enable by default in most environments
+	define txtr : gsub.addCommonFeature : gsub.createFeature 'kern'
 	define { chain-rule reverse-rule } : gsub.ChainRuleBuilder
 	define look-around null
 
diff --git a/packages/font-otl/src/index.ptl b/packages/font-otl/src/index.ptl
index bb5e890..e609274 100644
--- a/packages/font-otl/src/index.ptl
+++ b/packages/font-otl/src/index.ptl
@@ -53,7 +53,7 @@ define [buildGSUB para glyphStore markGlyphs] : begin
 		define plm : Object.assign {.} para.ligation.defaultBuildup
 		if (para.ligation.caltBuildup && para.ligation.caltBuildup.length) : begin
 			set plm.calt para.ligation.caltBuildup
-		buildLigations gsub para plm
+		buildLigations gsub glyphStore para plm
 
 	# frac
 	buildFrac gsub glyphStore
diff --git a/params/ligation-set.toml b/params/ligation-set.toml
index 77834a1..f953e8c 100644
--- a/params/ligation-set.toml
+++ b/params/ligation-set.toml
@@ -253,6 +253,14 @@ desc = 'Make 2 or more contiguous hash signs (number signs) (like `##`, `###` an
 samples = ["###", "####"]
 desc = 'Make 3 or more contiguous hash signs (number signs) (like `##` and `###`) connected'
 
+[simple.x-multiply]
+samples = ["2x2"]
+desc = 'Display the letter x as a multiply when between two numbers'
+
+[simple.numeric-literals]
+samples = ["0xF00D", "0o7104", "0b10010111"]
+desc = 'Shows the base in subscript within a numeric literal'
+
 ###################################################################################################
 
 # Non-tagged composites, used for inheritance
